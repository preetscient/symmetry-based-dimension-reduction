{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"main/","text":"Main Module The entry point for the application. This module orchestrates the execution of different processing steps. Functions main() : The main function that coordinates the execution of various modules. Usage Run the application: ```bash python main.py","title":"Main Module"},{"location":"main/#main-module","text":"The entry point for the application. This module orchestrates the execution of different processing steps.","title":"Main Module"},{"location":"main/#functions","text":"main() : The main function that coordinates the execution of various modules.","title":"Functions"},{"location":"main/#usage","text":"Run the application: ```bash python main.py","title":"Usage"},{"location":"pipeline/auts/","text":"AUTS Module This module handles automatic unit testing and validation for the project. It includes utilities for testing the integrity and correctness of the data processing functions. Functions run_tests() : Executes the unit tests. Usage To run all tests: ```bash python auts.py","title":"AUTS Module"},{"location":"pipeline/auts/#auts-module","text":"This module handles automatic unit testing and validation for the project. It includes utilities for testing the integrity and correctness of the data processing functions.","title":"AUTS Module"},{"location":"pipeline/auts/#functions","text":"run_tests() : Executes the unit tests.","title":"Functions"},{"location":"pipeline/auts/#usage","text":"To run all tests: ```bash python auts.py","title":"Usage"},{"location":"pipeline/gaut2gap/","text":"Gaut2Gap Module This module is responsible for converting GAUT data formats into GAP-compatible formats. It ensures the data interoperability between different systems. Functions convert_gaut_to_gap(gaut_data: pd.DataFrame) : Converts GAUT data to GAP format. Usage ```python from gaut2gap import convert_gaut_to_gap gaut_df = pd.read_csv('gaut_data.csv') gap_df = convert_gaut_to_gap(gaut_df)","title":"Gaut2Gap Module"},{"location":"pipeline/gaut2gap/#gaut2gap-module","text":"This module is responsible for converting GAUT data formats into GAP-compatible formats. It ensures the data interoperability between different systems.","title":"Gaut2Gap Module"},{"location":"pipeline/gaut2gap/#functions","text":"convert_gaut_to_gap(gaut_data: pd.DataFrame) : Converts GAUT data to GAP format.","title":"Functions"},{"location":"pipeline/gaut2gap/#usage","text":"```python from gaut2gap import convert_gaut_to_gap gaut_df = pd.read_csv('gaut_data.csv') gap_df = convert_gaut_to_gap(gaut_df)","title":"Usage"},{"location":"pipeline/lumping/","text":"Lumping Module Handles data aggregation and lumping processes. This is useful for condensing large datasets into more manageable forms. Functions aggregate_data(data: pd.DataFrame) : Aggregates data based on predefined rules. Usage ```python from lumping import aggregate_data df = pd.read_csv('data.csv') aggregated_df = aggregate_data(df)","title":"Lumping Module"},{"location":"pipeline/lumping/#lumping-module","text":"Handles data aggregation and lumping processes. This is useful for condensing large datasets into more manageable forms.","title":"Lumping Module"},{"location":"pipeline/lumping/#functions","text":"aggregate_data(data: pd.DataFrame) : Aggregates data based on predefined rules.","title":"Functions"},{"location":"pipeline/lumping/#usage","text":"```python from lumping import aggregate_data df = pd.read_csv('data.csv') aggregated_df = aggregate_data(df)","title":"Usage"},{"location":"pipeline/processing/","text":"Processing Module This module handles the main data processing tasks. It includes data cleaning, transformation, and validation. Functions clean_data(data: pd.DataFrame) : Cleans the data by removing invalid entries. transform_data(data: pd.DataFrame) : Transforms the data into the required format. Usage ```python from processing import clean_data, transform_data df = pd.read_csv('raw_data.csv') clean_df = clean_data(df) transformed_df = transform_data(clean_df)","title":"Processing Module"},{"location":"pipeline/processing/#processing-module","text":"This module handles the main data processing tasks. It includes data cleaning, transformation, and validation.","title":"Processing Module"},{"location":"pipeline/processing/#functions","text":"clean_data(data: pd.DataFrame) : Cleans the data by removing invalid entries. transform_data(data: pd.DataFrame) : Transforms the data into the required format.","title":"Functions"},{"location":"pipeline/processing/#usage","text":"```python from processing import clean_data, transform_data df = pd.read_csv('raw_data.csv') clean_df = clean_data(df) transformed_df = transform_data(clean_df)","title":"Usage"},{"location":"preloaded_data/batch_auts/","text":"Batch AUTS Module The batch_auts module is designed for automating unit tests within the batch processing workflow. It ensures that each batch process completes successfully and produces valid output. Functions run_batch_tests() : Executes automated tests on batch processing outputs. Usage ```python from batch_auts import run_batch_tests run_batch_tests()","title":"Batch AUTS Module"},{"location":"preloaded_data/batch_auts/#batch-auts-module","text":"The batch_auts module is designed for automating unit tests within the batch processing workflow. It ensures that each batch process completes successfully and produces valid output.","title":"Batch AUTS Module"},{"location":"preloaded_data/batch_auts/#functions","text":"run_batch_tests() : Executes automated tests on batch processing outputs.","title":"Functions"},{"location":"preloaded_data/batch_auts/#usage","text":"```python from batch_auts import run_batch_tests run_batch_tests()","title":"Usage"},{"location":"preloaded_data/batch_gaut2gap/","text":"Batch Gaut2Gap Module The batch_gaut2gap module handles the conversion of data formats from GAUT to GAP within the batch processing pipeline. It ensures that data is correctly formatted across all batches. Functions convert_batch_gaut_to_gap() : Converts GAUT data to GAP format across all batches. Usage ```python from batch_gaut2gap import convert_batch_gaut_to_gap convert_batch_gaut_to_gap()","title":"Batch Gaut2Gap Module"},{"location":"preloaded_data/batch_gaut2gap/#batch-gaut2gap-module","text":"The batch_gaut2gap module handles the conversion of data formats from GAUT to GAP within the batch processing pipeline. It ensures that data is correctly formatted across all batches.","title":"Batch Gaut2Gap Module"},{"location":"preloaded_data/batch_gaut2gap/#functions","text":"convert_batch_gaut_to_gap() : Converts GAUT data to GAP format across all batches.","title":"Functions"},{"location":"preloaded_data/batch_gaut2gap/#usage","text":"```python from batch_gaut2gap import convert_batch_gaut_to_gap convert_batch_gaut_to_gap()","title":"Usage"},{"location":"preloaded_data/batch_lumping/","text":"Batch Lumping Module The batch_lumping module handles data aggregation in batch processing tasks. It is used to lump data from multiple sources or over time periods. Functions lump_batches() : Aggregates data across multiple batches. Usage ```python from batch_lumping import lump_batches lump_batches()","title":"Batch Lumping Module"},{"location":"preloaded_data/batch_lumping/#batch-lumping-module","text":"The batch_lumping module handles data aggregation in batch processing tasks. It is used to lump data from multiple sources or over time periods.","title":"Batch Lumping Module"},{"location":"preloaded_data/batch_lumping/#functions","text":"lump_batches() : Aggregates data across multiple batches.","title":"Functions"},{"location":"preloaded_data/batch_lumping/#usage","text":"```python from batch_lumping import lump_batches lump_batches()","title":"Usage"},{"location":"preloaded_data/batch_processing/","text":"Batch Processing This module handles batch processing of data. It includes functions to process multiple files at once and manage large datasets. Functions batch_process(input_files: List[str]) : Processes a list of input files. save_results(output_file: str) : Saves the processed results to an output file. Usage ```python from batch_processing import batch_process input_files = ['file1.csv', 'file2.csv'] batch_process(input_files) Batch Processing Module The batch_processing module handles the overall batch processing logic, including data input, processing, and output. Functions batch_process(input_files: List[str]) : Processes a list of input files. save_results(output_file: str) : Saves the processed results to an output file. Usage ```python from batch_processing import batch_process input_files = ['file1.csv', 'file2.csv'] batch_process(input_files)","title":"Batch Processing"},{"location":"preloaded_data/batch_processing/#batch-processing","text":"This module handles batch processing of data. It includes functions to process multiple files at once and manage large datasets.","title":"Batch Processing"},{"location":"preloaded_data/batch_processing/#functions","text":"batch_process(input_files: List[str]) : Processes a list of input files. save_results(output_file: str) : Saves the processed results to an output file.","title":"Functions"},{"location":"preloaded_data/batch_processing/#usage","text":"```python from batch_processing import batch_process input_files = ['file1.csv', 'file2.csv'] batch_process(input_files)","title":"Usage"},{"location":"preloaded_data/batch_processing/#batch-processing-module","text":"The batch_processing module handles the overall batch processing logic, including data input, processing, and output.","title":"Batch Processing Module"},{"location":"preloaded_data/batch_processing/#functions_1","text":"batch_process(input_files: List[str]) : Processes a list of input files. save_results(output_file: str) : Saves the processed results to an output file.","title":"Functions"},{"location":"preloaded_data/batch_processing/#usage_1","text":"```python from batch_processing import batch_process input_files = ['file1.csv', 'file2.csv'] batch_process(input_files)","title":"Usage"},{"location":"preloaded_data/batch_run/","text":"Batch Run Module The batch_run module manages the execution of batch processing tasks. It is responsible for initializing and running the processing jobs. Functions run_batches() : Initializes and runs all batch processes sequentially or in parallel. Usage ```python from batch_run import run_batches run_batches()","title":"Batch Run Module"},{"location":"preloaded_data/batch_run/#batch-run-module","text":"The batch_run module manages the execution of batch processing tasks. It is responsible for initializing and running the processing jobs.","title":"Batch Run Module"},{"location":"preloaded_data/batch_run/#functions","text":"run_batches() : Initializes and runs all batch processes sequentially or in parallel.","title":"Functions"},{"location":"preloaded_data/batch_run/#usage","text":"```python from batch_run import run_batches run_batches()","title":"Usage"},{"location":"visualisation/vizlayout/","text":"Visualization Layout Module The viz_layout module is responsible for defining the layout and design of visualizations. This includes setting up plots, axes, and other visual elements. Functions setup_layout(figure, title: str) : Configures the layout of a given figure with a specified title. apply_theme(figure, theme_name: str) : Applies a visual theme to a figure. Usage ```python from viz_layout import setup_layout, apply_theme fig, ax = plt.subplots() setup_layout(fig, \"My Chart Title\") apply_theme(fig, \"dark_mode\") plt.show()","title":"Visualization Layout Module"},{"location":"visualisation/vizlayout/#visualization-layout-module","text":"The viz_layout module is responsible for defining the layout and design of visualizations. This includes setting up plots, axes, and other visual elements.","title":"Visualization Layout Module"},{"location":"visualisation/vizlayout/#functions","text":"setup_layout(figure, title: str) : Configures the layout of a given figure with a specified title. apply_theme(figure, theme_name: str) : Applies a visual theme to a figure.","title":"Functions"},{"location":"visualisation/vizlayout/#usage","text":"```python from viz_layout import setup_layout, apply_theme fig, ax = plt.subplots() setup_layout(fig, \"My Chart Title\") apply_theme(fig, \"dark_mode\") plt.show()","title":"Usage"},{"location":"visualisation/vizprocessing/","text":"Visualization Processing Module The vizprocessing module handles the preparation of data for visualization. It includes functions to generate plots and charts based on processed data. Functions generate_plots(data: pd.DataFrame) : Generates visualizations for the provided data. Usage ```python from vizprocessing import generate_plots df = pd.read_csv('processed_data.csv') generate_plots(df)","title":"Visualization Processing Module"},{"location":"visualisation/vizprocessing/#visualization-processing-module","text":"The vizprocessing module handles the preparation of data for visualization. It includes functions to generate plots and charts based on processed data.","title":"Visualization Processing Module"},{"location":"visualisation/vizprocessing/#functions","text":"generate_plots(data: pd.DataFrame) : Generates visualizations for the provided data.","title":"Functions"},{"location":"visualisation/vizprocessing/#usage","text":"```python from vizprocessing import generate_plots df = pd.read_csv('processed_data.csv') generate_plots(df)","title":"Usage"}]}